/* Datos de la malla (nombres exactos y prerrequisitos) */
const malla = {
  "I SEM": [
    { nombre: "Ciencias b치sicas para la salud", prereq: [] },
    { nombre: "Anatom칤a e histolog칤a", prereq: [] },
    { nombre: "Fundamentos de enfermer칤a", prereq: [] },
    { nombre: "Primeros auxilios", prereq: [] },
    { nombre: "Sociedad y cultura", prereq: [] },
    { nombre: "Desarrollo personal y autoliderazgo", prereq: [] },
    { nombre: "Antropolog칤a I PEG 1", prereq: [] }
  ],
  "II SEM": [
    { nombre: "Microbiolog칤a y parasitolog칤a", prereq: ["Ciencias b치sicas para la salud"] },
    { nombre: "Fisiolog칤a", prereq: ["Ciencias b치sicas para la salud"] },
    { nombre: "Proceso enfermero en el ciclo vital", prereq: ["Fundamentos de enfermer칤a"] },
    { nombre: "Educaci칩n para la salud I", prereq: [] },
    { nombre: "Antropolog칤a II", prereq: ["Antropolog칤a I PEG 1"] },
    { nombre: "Teolog칤a I PEG 2", prereq: [] },
    { nombre: "Oferta variable PEG 3", prereq: [] }
  ],
  "III SEM": [
    { nombre: "Fisiopatolog칤a", prereq: ["Fisiolog칤a"] },
    { nombre: "Farmacolog칤a", prereq: ["Microbiolog칤a y parasitolog칤a", "Fisiolog칤a"] },
    { nombre: "Cuidados de enfermer칤a I", prereq: ["Proceso enfermero en el ciclo vital"] },
    { nombre: "Educaci칩n para la salud II", prereq: ["Educaci칩n para la salud I"] },
    { nombre: "Relaci칩n de ayuda", prereq: [] },
    { nombre: "Bioestad칤stica", prereq: [] },
    { nombre: "Minor 1", prereq: [] }
  ],
  "IV SEM": [
    { nombre: "Cuidados de enfermer칤a II", prereq: ["Cuidados de enfermer칤a I"] },
    { nombre: "Introducci칩n a la enfermer칤a comunitaria", prereq: ["Educaci칩n para la salud II"] },
    { nombre: "Ingl칠s t칠cnico para salud", prereq: [] },
    { nombre: "Epidemiolog칤a y salud p칰blica", prereq: ["Bioestad칤stica"] },
    { nombre: "Minor 2", prereq: [] },
    { nombre: "Teolog칤a II PEG 4", prereq: [] }
  ],
  "V SEM": [
    { nombre: "Enfermer칤a cl칤nica del adulto y persona mayor", prereq: ["Cuidados de enfermer칤a II", "Farmacolog칤a", "Fisiopatolog칤a"] },
    { nombre: "Enfermer칤a en la comunidad I", prereq: ["Introducci칩n a la enfermer칤a comunitaria"] },
    { nombre: "Enfermer칤a y emprendimiento", prereq: [] },
    { nombre: "Metodolog칤a de la investigaci칩n", prereq: ["Bioestad칤stica"] },
    { nombre: "Minor 3", prereq: [] }
  ],
  "VI SEM": [
    { nombre: "Enfermer칤a de la mujer", prereq: ["Enfermer칤a cl칤nica del adulto y persona mayor"] },
    { nombre: "Enfermer칤a del ni침o y adolescente", prereq: ["Enfermer칤a cl칤nica del adulto y persona mayor"] },
    { nombre: "Enfermer칤a en la comunidad II", prereq: ["Enfermer칤a en la comunidad I"] },
    { nombre: "Pr치ctica basada en la evidencia", prereq: ["Metodolog칤a de la investigaci칩n"] },
    { nombre: "칄tica PEG 5", prereq: [] }
  ],
  "VII SEM": [
    { nombre: "Enfermer칤a gerontogeri치trica", prereq: ["Enfermer칤a cl칤nica del adulto y persona mayor"] },
    { nombre: "Cuidados de fin de la vida", prereq: ["Enfermer칤a cl칤nica del adulto y persona mayor"] },
    { nombre: "칄tica profesional aplicada", prereq: ["칄tica PEG 5"] },
    { nombre: "Gesti칩n y administraci칩n en salud", prereq: ["Pr치ctica basada en la evidencia"] },
    { nombre: "Oferta variable PEG 6", prereq: [] }
  ],
  "VIII SEM": [
    { nombre: "Enfermer칤a en situaciones de urgencia", prereq: ["Enfermer칤a cl칤nica del adulto y persona mayor"] },
    { nombre: "Enfermer칤a en salud mental y psiquiatr칤a", prereq: ["Pr치ctica basada en la evidencia"] },
    { nombre: "Liderazgo y gesti칩n de equipos de salud", prereq: ["Gesti칩n y administraci칩n en salud"] },
    { nombre: "Innovaci칩n", prereq: ["Pr치ctica basada en la evidencia"] },
    { nombre: "Seminario de investigaci칩n", prereq: ["Metodolog칤a de la investigaci칩n"] },
    { nombre: "Teolog칤a III PEG 7", prereq: [] },
    { nombre: "Oferta variable PEG 8", prereq: [] }
  ],
  "IX SEM": [
    { nombre: "Introducci칩n al ejercicio profesional de enfermer칤a", prereq: ["Licenciatura en enfermer칤a"] }
  ],
  "X SEM": [
    { nombre: "Internado profesional en el 치mbito hospitalario adulto/ni침o", prereq: ["Introducci칩n al ejercicio profesional de enfermer칤a"] },
    { nombre: "Internado profesional en el 치mbito comunitario", prereq: ["Introducci칩n al ejercicio profesional de enfermer칤a"] },
    { nombre: "Internado profesional en el 치mbito hospitalario cr칤tico", prereq: ["Introducci칩n al ejercicio profesional de enfermer칤a"] }
  ]
};

/* DOM refs */
const container = document.getElementById('malla-container');
const mensaje = document.getElementById('mensaje');
const resetBtn = document.getElementById('resetBtn');

/* Mapas para acceso r치pido */
const courseMap = new Map();      // nombre -> { element, prereq, completed }
const dependentsMap = new Map();  // nombre -> [nombres que dependen de este nombre]

/* Generar UI y estructuras */
Object.keys(malla).forEach(semestre => {
  const semDiv = document.createElement('div');
  semDiv.className = 'semestre';

  const title = document.createElement('h2');
  title.textContent = semestre;
  semDiv.appendChild(title);

  malla[semestre].forEach(curso => {
    const div = document.createElement('div');
    div.className = 'ramo';
    div.textContent = curso.nombre;
    div.dataset.nombre = curso.nombre;
    // tooltip con prerrequisitos (칰til)
    div.title = curso.prereq.length ? 'Prerrequisitos: ' + curso.prereq.join(', ') : 'Sin prerrequisitos';
    semDiv.appendChild(div);

    courseMap.set(curso.nombre, {
      element: div,
      prereq: curso.prereq.slice(), // copia
      completed: false
    });
  });

  container.appendChild(semDiv);
});

/* Construir mapa de dependientes */
courseMap.forEach((obj, nombre) => {
  obj.prereq.forEach(pr => {
    if (!dependentsMap.has(pr)) dependentsMap.set(pr, []);
    dependentsMap.get(pr).push(nombre);
  });
});

/* Chequea si todos los prerequisitos de 'nombre' est치n marcados (completed=true).
   Nota: si un prerequisito NO existe en la malla (ej: "Licenciatura en enfermer칤a"),
   lo consideramos externo y por defecto NO cumplido (queda bloqueado). */
function canUnlock(nombre) {
  const obj = courseMap.get(nombre);
  if (!obj) return false;
  for (const pr of obj.prereq) {
    const preObj = courseMap.get(pr);
    if (!preObj) {
      // prerequisito externo no presente: no se considera cumplido
      return false;
    }
    if (!preObj.completed) return false;
  }
  return true;
}

/* Actualiza clases (locked / unlocked / completed) en UI */
function updateLocks() {
  courseMap.forEach((obj, nombre) => {
    const el = obj.element;
    el.classList.remove('locked','unlocked','completed','shake');
    if (obj.completed) {
      el.classList.add('completed');
      el.setAttribute('aria-checked','true');
      el.setAttribute('aria-disabled','false');
    } else {
      if (canUnlock(nombre)) {
        el.classList.add('unlocked');
        el.setAttribute('aria-disabled','false');
      } else {
        el.classList.add('locked');
        el.setAttribute('aria-disabled','true');
      }
      el.setAttribute('aria-checked','false');
    }
  });
}

/* Mostrar mensaje suave */
let msgTimeout = null;
function showMessage(text, duration = 3000) {
  clearTimeout(msgTimeout);
  mensaje.textContent = text;
  mensaje.classList.add('show');
  msgTimeout = setTimeout(() => {
    mensaje.classList.remove('show');
  }, duration);
}

/* Al hacer click: marcar/desmarcar con l칩gica de prerequisitos */
courseMap.forEach((obj, nombre) => {
  const el = obj.element;

  el.addEventListener('click', () => {
    // Si ya est치 completado -> desmarcarlo y desmarcar todos sus dependientes (transitivo)
    if (obj.completed) {
      const toUnmark = new Set();
      function dfs(u) {
        toUnmark.add(u);
        const deps = dependentsMap.get(u) || [];
        deps.forEach(v => {
          if (!toUnmark.has(v)) dfs(v);
        });
      }
      dfs(nombre);
      toUnmark.forEach(n => {
        const o = courseMap.get(n);
        if (o) o.completed = false;
      });
      updateLocks();
      showMessage('Se desmarc칩 el ramo y sus dependientes si correspond칤a.', 2200);
      return;
    }

    // Si no est치 completado: solo podemos marcar si est치 desbloqueado (canUnlock)
    if (!canUnlock(nombre)) {
      // feedback corto
      el.classList.add('shake');
      setTimeout(() => el.classList.remove('shake'), 360);
      showMessage('No puedes marcar este ramo: faltan prerrequisitos.', 2000);
      return;
    }

    // Marcar como completado
    obj.completed = true;
    updateLocks();
    // Mensaje tal como pediste:
    showMessage('춰Felicidades Antito, eres la mejor 游눘!', 3000);
  });
});

/* Reset: desmarca todo */
resetBtn.addEventListener('click', () => {
  courseMap.forEach(o => o.completed = false);
  updateLocks();
  showMessage('Malla reseteada.', 1500);
});

/* Estado inicial */
updateLocks();
